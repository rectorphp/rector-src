includes:
    - vendor/symplify/phpstan-rules/config/array-rules.neon
    - vendor/symplify/phpstan-rules/config/code-complexity-rules.neon
    - vendor/symplify/phpstan-rules/config/doctrine-rules.neon
    - vendor/symplify/phpstan-rules/config/forbidden-static-rules.neon
    - vendor/symplify/phpstan-rules/config/naming-rules.neon
    - vendor/symplify/phpstan-rules/config/regex-rules.neon
    - vendor/symplify/phpstan-rules/config/services-rules.neon
    - vendor/symplify/phpstan-rules/config/static-rules.neon
    - vendor/symplify/phpstan-rules/config/size-rules.neon
    - vendor/symplify/phpstan-rules/config/string-to-constant-rules.neon
    - vendor/symplify/phpstan-rules/config/symfony-rules.neon
    - vendor/symplify/phpstan-rules/config/test-rules.neon

parameters:
    level: 8

    parallel:
        # to prevent full thread lagging pc
        maximumNumberOfProcesses: 15

    paths:
        - rector.php
        - bin
        - src
        - rules
        - packages
        - tests
        - utils
        # this cannot be put it, because it wipes PHPStan cache on each run :( - must run in separate
        #- config

    # to allow installing with various phsptan versions without reporting old errors here
    bootstrapFiles:
        - vendor/symfony/dependency-injection/Loader/Configurator/ContainerConfigurator.php

    scanDirectories:
        - stubs

    reportUnmatchedIgnoredErrors: false
    checkGenericClassInNonGenericObjectType: false

    excludePaths:
        # too modern code for PHPStan 0.12.2
        - bin/validate-phpstan-version.php

        # temp rule
        - src/Rector/ConfigureRector.php

        # temporary stinrgable migration from template type provider
        - src/Console/Command/InitCommand.php
        - bin/generate-changelog.php

        - */config.php

        # broken in PHPStan https://github.com/rectorphp/rector/runs/1305002460#step:5:56
        - packages/BetterPhpDocParser/ValueObject/PhpDocNode/AbstractTagValueNode.php
        - packages/Testing/PHPUnit/*.php
        - rules/DowngradePhp70/Rector/FunctionLike/AbstractDowngradeParamDeclarationRector.php

        # demo rule
        - tests/Issues/AliasedImportDouble/Rector/ClassMethod/AddAliasImportRector.php

        # complex printer
        - '*tests/Rector/MethodCall/RenameMethodRector/**/SomeClass.php'
        # tests files
        - "*tests/*/Expected/*"
        - '*tests/*/Fixture/*'
        - '*tests/*/Source/*'
        - '*tests/Source/*'
        # part of composer
        - '*/tests/Rector/Psr4/MultipleClassFileToPsr4ClassesRector/Expected/Just*ExceptionWithoutNamespace.php'
        - packages-tests/BetterPhpDocPraser/PhpDocParser/TagValueNodeReprint/Fixture/SymfonyRoute/RouteName.php

        # tests
        - tests/DependencyInjection/config

    ignoreErrors:
        # PHP 7.4 1_000 support
        - '#Property PhpParser\\Node\\Scalar\\DNumber\:\:\$value \(float\) does not accept string#'

        - '#Parameter \#1 \$node of method Rector\\PostRector\\Collector\\NodesToAddCollector\:\:wrapToExpression\(\) expects PhpParser\\Node\\Expr\|PhpParser\\Node\\Stmt, PhpParser\\Node given#'

        - '#Cognitive complexity for "Rector\\Php80\\NodeResolver\\SwitchExprsResolver\:\:resolve\(\)" is (.*?), keep it under 10#'

        -
            message: "#^Cognitive complexity for \"Rector\\\\PhpSpecToPHPUnit\\\\Rector\\\\MethodCall\\\\PhpSpecPromisesToPHPUnitAssertRector\\:\\:refactor\\(\\)\" is (.*?), keep it under 10$#"
            path: rules/PhpSpecToPHPUnit/Rector/MethodCall/PhpSpecPromisesToPHPUnitAssertRector.php

        -
            message: '#Class cognitive complexity is \d+, keep it under \d+#'
            paths:
                - rules/Php70/EregToPcreTransformer.php
                - packages/NodeTypeResolver/NodeTypeResolver.php
                - rules/Renaming/NodeManipulator/ClassRenamer.php

        - "#^Cognitive complexity for \"Rector\\\\Php70\\\\EregToPcreTransformer\\:\\:(.*?)\" is (.*?), keep it under 10$#"
        - '#Cognitive complexity for "Rector\\Core\\PhpParser\\Node\\Value\\ValueResolver\:\:getValue\(\)" is \d+, keep it under 10#'
        - '#Cognitive complexity for "Rector\\DeadCode\\NodeManipulator\\LivingCodeManipulator\:\:keepLivingCodeFromExpr\(\)" is \d+, keep it under 10#'

        # known value
        - '#Property PhpParser\\Node\\Stmt\\Foreach_\:\:\$valueVar \(PhpParser\\Node\\Expr\) does not accept PhpParser\\Node\\Expr\|null#'

        - '#Parameter \#1 \$variable of class Rector\\Php70\\ValueObject\\VariableAssignPair constructor expects PhpParser\\Node\\Expr\\ArrayDimFetch\|PhpParser\\Node\\Expr\\PropertyFetch\|PhpParser\\Node\\Expr\\StaticPropertyFetch\|PhpParser\\Node\\Expr\\Variable, PhpParser\\Node\\Expr given#'

        # is nested expr
        - '#Access to an undefined property PhpParser\\Node\\Expr\:\:\$expr#'

        # 3rd party package
        -
            message: '#Array (with keys|destruct) is not allowed\. Use value object to pass data instead#'
            path: rules/Php70/EregToPcreTransformer.php
        -
            message: '#Use explicit return value over magic &reference#'
            path: rules/Php70/EregToPcreTransformer.php
        -
            message: '#Use value object over return of values#'
            path: rules/Php70/EregToPcreTransformer.php

        -
            message: '#Nested foreach with empty statement is not allowed#'
            paths:
                - rules/Transform/Rector/ClassMethod/ReturnTypeWillChangeRector.php

        # symplify 9
        - '#Use another value object over array with string\-keys and objects, array<string, ValueObject\>#'
        - '#Do not use factory/method call in constructor\. Put factory in config and get service with dependency injection#'

        # false positives checked in another method
        -
            message: '#If condition is always false#'
            paths:
                - rules/CodeQuality/Rector/Concat/JoinStringConcatRector.php
                - packages/NodeNestingScope/NodeFinder/ScopeAwareNodeFinder.php

        - '#Method (.*?) should return array<PhpParser\\Node\\(.*?)\> but returns array<PhpParser\\Node\>#'

        - '#Access to an undefined property PhpParser\\Node\\Expr\\Error\|PhpParser\\Node\\Expr\\Variable\:\:\$name#'

        -
            message: '#Comparison operation "<" between 0 and 2 is always true#'
            paths:
                - rules/Php70/Rector/FuncCall/MultiDirnameRector.php

        -
            message: '#Call to function is_string\(\) with float will always evaluate to false#'
            path: src/PhpParser/Printer/BetterStandardPrinter.php

        # class_exists is forbidden to enforce static reflection, but in a compiler pass we want runtime autoloading
        -
            message:  '#Function "class_exists\(\)" cannot be used/left in the code#'
            paths:
                 - src/DependencyInjection/CompilerPass/VerifyRectorServiceExistsCompilerPass.php
                 # for config class reflection
                 - packages/NodeTypeResolver/DependencyInjection/PHPStanServicesFactory.php

        # known values from other methods
        -
            message: '#Negated boolean expression is always true#'
            path: rules/PhpSpecToPHPUnit/NodeFactory/AssertMethodCallFactory.php

        - '#PhpParser\\Node\\Expr\\Error\|PhpParser\\Node\\Expr\\Variable given#'

        - '#Method Rector\\CodeQuality\\Rector\\Foreach_\\SimplifyForeachToCoalescingRector\:\:matchReturnOrAssignNode\(\) should return PhpParser\\Node\\Expr\\Assign\|PhpParser\\Node\\Stmt\\Return_\|null but returns PhpParser\\Node\|null#'

        - '#Instanceof between PhpParser\\Node\\Stmt and Rector\\Core\\PhpParser\\Node\\CustomNode\\FileWithoutNamespace will always evaluate to false#'

        -
            message: '#Unreachable statement \- code above always terminates#'
            paths:
                - bin/rector.php
                - rules/Php70/Rector/FuncCall/MultiDirnameRector.php

        -
            message: '#Function "class_exists\(\)" cannot be used/left in the code#'
            paths:
                - src/Bootstrap/ExtensionConfigResolver.php

        # @todo fix later
        -
            message: '#There should be no empty class#'
            paths:
                - packages/StaticTypeMapper/ValueObject/Type/*Type.php

        # generics nullable bugs
        - '#Method (.*?) should return (.*?)\|null but returns PhpParser\\Node\|null#'
        - '#Method (.*?) should return array<T of PhpParser\\Node\> but returns array<PhpParser\\Node\>#'

        # fixed in php-parser master
        - '#Parameter \#4 \$classWithConstants of class Rector\\Privatization\\ValueObject\\ReplaceStringWithClassConstant constructor expects class\-string, string given#'

        # buggy phpstan clas-string
        - '#Method (.*?) should return class\-string but returns string#'

        -
            message: '#\$this as argument is not allowed\. Refactor method to service composition#'
            paths:
                - src/Rector/AbstractRector.php

        - '#Method Rector\\Core\\PhpParser\\Node\\BetterNodeFinder\:\:findParentType\(\) should return T of PhpParser\\Node\|null but returns class\-string<T of PhpParser\\Node\>\|T of PhpParser\\Node#'

        - '#Property Rector\\Core\\PhpParser\\Node\\AssignAndBinaryMap\:\:\$binaryOpToAssignClasses \(array<class\-string<PhpParser\\Node\\Expr\\BinaryOp\>, class\-string<PhpParser\\Node\\Expr\\BinaryOp\>\>\) does not accept array#'

        -
            message: '#Function "property_exists\(\)" cannot be used/left in the code#'
            paths:
                # on PhpParser Nodes
                - packages/NodeTypeResolver/NodeVisitor/StatementNodeVisitor.php
                - packages/NodeNameResolver/NodeNameResolver.php
                - packages/NodeNameResolver/NodeNameResolver/ClassNameResolver.php
                - packages/NodeTypeResolver/PHPStan/Scope/PHPStanNodeScopeResolver.php

        # known types
        - '#Call to an undefined method PHPStan\\Type\\ConstantType\:\:getValue\(\)#'
        - '#Parameter \#1 \$stmts of method Rector\\EarlyReturn\\Rector\\Return_\\PreparedValueToEarlyReturnRector\:\:collectIfs\(\) expects array<PhpParser\\Node\\Stmt\\If_\>, array<PhpParser\\Node\\Stmt\> given#'
        - '#Access to an undefined property PhpParser\\Node\\FunctionLike\|PhpParser\\Node\\Stmt\\If_\:\:\$stmts#'

        - '#Cognitive complexity for "Rector\\CodeQuality\\Rector\\Isset_\\IssetOnPropertyObjectToPropertyExistsRector\:\:refactor\(\)" is \d+, keep it under 10#'

        - '#(.*?) class\-string, string given#'

        # part of refactor() API, node must be returned, or does bring any value
        -
            message: '#Use void instead of modify and return self object#'
            paths:
                - '*Rector.php'

        # PHP 7_4 literal syntax
        - '#Property PhpParser\\Node\\Scalar\\DNumber\:\:\$value \(float\|int\) does not accept string#'

        # mimics original doctrine/annotations parser, improve later when finished
        -
            message: '#Array destruct is not allowed\. Use value object to pass data instead#'
            paths:
                - packages/BetterPhpDocParser/PhpDocParser/StaticDoctrineAnnotationParser/ArrayParser.php

        -
            message: '#Use value object over return of values#'
            paths:
                - packages/BetterPhpDocParser/PhpDocParser/StaticDoctrineAnnotationParser/ArrayParser.php

        -
            message: '#\$this as argument is not allowed\. Refactor method to service composition#'
            paths:
                - packages/BetterPhpDocParser/ValueObject/Parser/BetterTokenIterator.php

        - '#Cognitive complexity for "Rector\\BetterPhpDocParser\\PhpDocParser\\DoctrineAnnotationDecorator\:\:mergeNestedDoctrineAnnotations\(\)" is \d+, keep it under 10#'

        - '#Cognitive complexity for "Rector\\BetterPhpDocParser\\Printer\\PhpDocInfoPrinter\:\:printDocChildNode\(\)" is \d+, keep it under 10#'
        - '#Cognitive complexity for "Rector\\NodeTypeResolver\\NodeTypeResolver\:\:getType\(\)" is \d+, keep it under 10#'

        -
            message: '#Property with protected modifier is not allowed\. Use interface contract method instead#'
            path: 'packages/BetterPhpDocParser/ValueObject/PhpDoc/DoctrineAnnotation/AbstractValuesAwareNode.php'

        -
            message: '#Do not use setter on a service#'
            paths:
                - packages/NodeTypeResolver/PhpDocNodeVisitor/*PhpDocNodeVisitor.php

        # known type
        - '#Parameter \#3 \$pseudoNamespaceToNamespace of method Rector\\NodeTypeResolver\\PhpDocNodeVisitor\\UnderscoreRenamePhpDocNodeVisitor\:\:shouldSkip\(\) expects Rector\\Renaming\\ValueObject\\PseudoNamespaceToNamespace, Rector\\Renaming\\ValueObject\\PseudoNamespaceToNamespace\|null given#'

        # known types
        - '#Parameter (.*?) expects PhpParser\\Node, PhpParser\\Node\|null given#'

        -
            message: '#Class cognitive complexity is \d+, keep it under \d+#'
            paths:
                - packages/PHPStanStaticTypeMapper/TypeMapper/UnionTypeMapper.php

        -
            message: '#Property with protected modifier is not allowed\. Use interface contract method instead#'
            paths:
                - src/Rector/AbstractRector.php

        - '#Cannot call method getSmartFileInfo\(\) on Rector\\Core\\ValueObject\\Application\\File\|null#'

        - '#Method Rector\\Core\\Tests\\DependencyInjection\\ConfigurableRectorImportConfigCallsMergeTest\:\:provideData\(\) return type has no value type specified in iterable type Iterator#'

        -
            message: '#Function "function_exists\(\)" cannot be used/left in the code#'
            paths:
                 - src/functions/node_helper.php

        # special case - cleanup in the future
        -
            message: '#File processor must require Rector rules in constructor via TypeRectorInterface\[\] \$typeRectors array autowire#'
            path: src/Application/FileProcessor/PhpFileProcessor.php

        - '#Use required typed property over of nullable property#'
        - '#Method Rector\\BetterPhpDocParser\\PhpDocParser\\BetterPhpDocParser\:\:parseChildAndStoreItsPositions\(\) should return PHPStan\\PhpDocParser\\Ast\\PhpDoc\\PhpDocTagNode\|PHPStan\\PhpDocParser\\Ast\\PhpDoc\\PhpDocTextNode but returns PHPStan\\PhpDocParser\\Ast\\PhpDoc\\PhpDocChildNode#'

        # deserves better architecture
        -
            message: '#Do not use chained method calls#'
            path: packages/BetterPhpDocParser/Printer/PhpDocInfoPrinter.php

        -
            message: '#Function "dump_node\(\)" cannot be used/left in the code#'
            path: src/functions/node_helper.php

        # union false positive
        - '#Method Rector\\Comments\\CommentRemover\:\:removeFromNode\(\) has parameter \$node with no value type specified in iterable type array#'

        # false positive
        - '#Attribute class JetBrains\\PhpStorm\\Immutable does not exist#'

        # class-string miss match
        - '#Parameter \#1 \$classes of method Rector\\BetterPhpDocParser\\PhpDocInfo\\PhpDocInfo<PHPStan\\PhpDocParser\\Ast\\Node\>\:\:getByAnnotationClasses\(\) expects array<class\-string\>, array<int, string\> given#'
        - '#Parameter \#1 \$classes of method Rector\\BetterPhpDocParser\\PhpDocInfo\\PhpDocInfo<TNode of PHPStan\\PhpDocParser\\Ast\\Node\>\:\:getByAnnotationClasses\(\) expects array<class\-string\>, array<string\> given#'

        - '#expects class\-string<TNode of PHPStan\\PhpDocParser\\Ast\\Node\>, string given#'
        # weird generics
        - '#Method Rector\\BetterPhpDocParser\\PhpDocInfo\\PhpDocInfo\:\:getByType\(\) should return array<TNode of PHPStan\\PhpDocParser\\Ast\\Node\> but returns array<PHPStan\\PhpDocParser\\Ast\\Node\>#'

        - '#Callable callable\(PHPStan\\Type\\Type\)\: PHPStan\\Type\\Type invoked with 2 parameters, 1 required#'

        # array_index on generic types
        - '#Method Rector\\NodeTypeResolver\\PHPStan\\Type\\TypeFactory\:\:uniquateTypes\(\) should return array<TType of PHPStan\\Type\\Type\> but returns array<int, PHPStan\\Type\\Type\>#'

        # resolve later
        - '#Method "(.*?)\(\)" only calling another method call and has no added value\. Use the inlined call instead#'
        - '#Method "processRenameVariable\(\)" returns bool type, so the name should start with is/has/was#'
        - '#Method "refactorParamType\(\)" returns bool type, so the name should start with is/has/was#'
        - '#Method "decorateReturnWithSpecificType\(\)" returns bool type, so the name should start with is/has/was#'
        - '#Method "resolveObjectType\(\)" returns bool type, so the name should start with is/has/was#'

        # native filesystem calls, required for performance reasons
        -
            message: '#"@\\unlink\(\$tmpPath\)" is forbidden to use#'
            paths:
                - packages/Caching/ValueObject/Storage/FileCacheStorage.php
        -
            message: '#"@\\rename\(\$tmpPath, \$path\)" is forbidden to use#'
            paths:
                - packages/Caching/ValueObject/Storage/FileCacheStorage.php
        -
            message: '#"@\\var_export\(new \\Rector\\Caching\\ValueObject\\CacheItem\(\$variableKey, \$data\), true\)" is forbidden to use#'
            paths:
                - packages/Caching/ValueObject/Storage/FileCacheStorage.php

        # resolve later
        -  '#Variables "\$(.*?)" are overridden\. This can lead to unwanted bugs, please pick a different name to avoid it#'

        -
            message: '#Instead of abstract class, use specific service with composition#'
            paths:
                - packages/BetterPhpDocParser/ValueObject/PhpDoc/DoctrineAnnotation/AbstractValuesAwareNode.php
                - packages/PostRector/Rector/AbstractPostRector.php
                - rules/PhpSpecToPHPUnit/Rector/AbstractPhpSpecToPHPUnitRector.php
                - src/Rector/AbstractRector.php

        -
            message: '#This call has duplicate argument#'
            paths:
                 - rules/Php72/Rector/Assign/ReplaceEachAssignmentWithKeyCurrentRector.php

        -
            message: '#foreach\(\), while\(\), for\(\) or if\(\) cannot contain a complex expression\. Extract it to a new variable on a line before#'
            paths:
                - packages/NodeNestingScope/FlowOfControlLocator.php
                - rules/CodeQuality/Rector/Return_/SimplifyUselessVariableRector.php
                - rules/Php70/Rector/FuncCall/MultiDirnameRector.php
                - src/Application/FileProcessor.php
                - src/PhpParser/Node/BetterNodeFinder.php

        # find everything class, better then 10 different finders
        -
            message: '#Class cognitive complexity is \d+, keep it under 50#'
            paths:
                - src/PhpParser/Node/BetterNodeFinder.php

        -
            message: '#Parameter \#2 \$length of function str_split expects int<1, max\>, int given#'
            paths:
                - rules/Php74/Rector/LNumber/AddLiteralSeparatorToNumberRector.php

        -
            message: '#Class has a static method must so must contains "Static" in its name#'
            paths:
                - packages/FileFormatter/ValueObject/Indent.php #17
                - packages/FileFormatter/ValueObject/NewLine.php #15
                - src/Application/VersionResolver.php #16
                - utils/compiler/src/Unprefixer.php #9

        # waits for phpstan upgrade to php-parser 4.13
        - '#Access to an undefined property PhpParser\\Node\\Arg\|PhpParser\\Node\\VariadicPlaceholder\:\:\$value#'
        - '#(.*?), array<PhpParser\\Node\\Arg\|PhpParser\\Node\\VariadicPlaceholder\> given#'

        - '#Parameter "\w+" cannot have default value#'

        # scope & mutating scope mish-mash
        - '#Parameter \#3 \$nodeCallback of method PHPStan\\Analyser\\NodeScopeResolver\:\:processNodes\(\) expects callable\(PhpParser\\Node, PHPStan\\Analyser\\Scope\)\: void, Closure\(PhpParser\\Node, PHPStan\\Analyser\\MutatingScope\)\: void given#'

        # share configuration to avoid duplication in 5 rules
        -
            message: '#Instead of abstract class, use specific service with composition#'
            path: rules/Strict/Rector/AbstractFalsyScalarRuleFixerRector.php

        # false positive - configured parmaeter
        -
            message: '#Property with protected modifier is not allowed\. Use interface contract method instead#'
            path: rules/Strict/Rector/AbstractFalsyScalarRuleFixerRector.php

        # internal tag
        - '#Unknown PHPDoc tag\: @phpstan\-rule#'
        - '#Cognitive complexity for "Rector\\TypeDeclaration\\PHPStan\\Type\\ObjectTypeSpecifier\:\:matchShortenedObjectType\(\)" is 14, keep it under 10#'

        # many internal cases
        - '#Calling (.*?) is not covered by backward compatibility promise\. The method might change in a minor PHPStan version#'
        - '#Creating (.*?) is not covered by backward compatibility promise\. The class might change in a minor PHPStan version#'

        # generated content - not reliable values
        -
            message: '#Offset (.*?) on array(.*?) on left side of \?\? always exists and is not nullable#'
            paths:
                - packages/NodeTypeResolver/DependencyInjection/PHPStanServicesFactory.php

        -
            message: '#Method Rector\\VersionBonding\\PhpVersionedFilter\:\:filter\(\) should return array<T of Rector\\Core\\Contract\\Rector\\RectorInterface\> but returns array<int, \(Rector\\VersionBonding\\Contract\\MinPhpVersionInterface&T of Rector\\Core\\Contract\\Rector\\RectorInterface\)\|T of Rector\\Core\\Contract\\Rector\\RectorInterface\>#'
            paths:
                - packages/VersionBonding/PhpVersionedFilter.php

        # use lighter service for performance reasons
        -
            path: packages/Caching/ValueObject/Storage/FileCacheStorage.php
            message: '#Instead of "Nette\\Utils\\FileSystem" class/interface use "Symplify\\SmartFileSystem\\SmartFileSystem"#'

        -
            path: src/Bootstrap/RectorConfigsResolver.php
            message: '#Method Rector\\Core\\Bootstrap\\RectorConfigsResolver\:\:resolveFromInput\(\) should return string\|null but returns string\|false#'

        - '#Cognitive complexity for "Rector\\Core\\NodeManipulator\\ClassMethodAssignManipulator\:\:collectReferenceVariableNames\(\)" is 13, keep it under 10#'

        -
            path: rules/EarlyReturn/Rector/If_/ChangeAndIfToEarlyReturnRector.php
            message: '#Class cognitive complexity is 31, keep it under 30#'

        -
            message: '#Use separate function calls with readable variable names#'
            path: src/DependencyInjection/Loader/Configurator/RectorServiceConfigurator.php

        -
            message: '#\$service\-\>call\("configure", \[\[ \.\.\. \]\]\) must be followed by exact array#'
            path: src/DependencyInjection/Loader/Configurator/RectorServiceConfigurator.php

        # on purpose to make use of worker paralle pattern
        -
            message: '#Instead of abstract class, use specific service with composition#'
            path: src/Console/Command/AbstractProcessCommand.php

        # json for paralell serialization
        -
            message: '#Use value object over return of values#'
            path: packages/Parallel/Application/ParallelFileProcessor.php

        # known value object, nullable due to typed property
        -
            message: '#Cannot call method (.*?)\(\) on (.*?)\\ProcessPool\|null#'
            path: packages/Parallel/Application/ParallelFileProcessor.php

        # messed closure PHP vs php-parser type
        -
            message: '#Instead of "Closure" class/interface use "PhpParser\\Node\\Expr\\Closure"#'
            path:  packages/Parallel/Application/ParallelFileProcessor.php
        - '#PHPDoc tag @param for parameter \$postFileCallback with type \(Closure\)\|null is not subtype of native type Closure#'

        # parallel complexity
        - '#Cognitive complexity for "Rector\\Parallel\\Application\\ParallelFileProcessor\:\:process\(\)" is \d+, keep it under 10#'

        - '#Argument and options "debug", "clear\-cache" got confused#'

        # strict rules
        - '#Dynamic call to static method PHPUnit\\Framework\\Assert\:\:(.*?)\(\)#'

        # specific generics
        - '#Parameter \#1 \$node (.*?) of method Rector\\(.*?)Rector\:\:refactor\(\) should be contravariant with parameter \$node \(PhpParser\\Node\) of method Rector\\Core\\Contract\\Rector\\PhpRectorInterface\:\:refactor\(\)#'

        # only for empty ctor
        - '#Rector\\Core\\PhpParser\\NodeTraverser\\RectorNodeTraverser\:\:__construct\(\) does not call parent constructor from PhpParser\\NodeTraverser#'

        -
            message: '#Class has a static method must so must contains "Static" in its name#'
            path: src/Util/StringUtils.php

        # generics
        - '#Method Rector\\Core\\PhpParser\\NodeTraverser\\RectorNodeTraverser\:\:traverse\(\) should return array<TNode of PhpParser\\Node\> but returns array<PhpParser\\Node\>#'
        - '#Parameter \#1 \$stmts of class Rector\\Core\\PhpParser\\Node\\CustomNode\\FileWithoutNamespace constructor expects array<PhpParser\\Node\\Stmt\>, array<TNode of PhpParser\\Node\> given#'

        # strict - resolve later
        - '#Foreach overwrites \$(.*?) with its value variable#'

        -
            message: '#Strict comparison using \!\=\= between null and null will always evaluate to false#'
            path: rules/Renaming/Rector/FileWithoutNamespace/PseudoNamespaceToNamespaceRector.php

        # stricter child type on purpose
        - '#Parameter \#1 \$nodes \(array<PhpParser\\Node\\Stmt\>\) of method Rector\\PostRector\\Rector\\(.*?)\:\:beforeTraverse\(\) should be contravariant with parameter \$nodes \(array<PhpParser\\Node\>\) of method PhpParser\\NodeVisitor\:\:beforeTraverse\(\)#'

        # stricter child type on purpose
        - '#Parameter \#1 \$tokenIterator \(Rector\\BetterPhpDocParser\\ValueObject\\Parser\\BetterTokenIterator\) of method Rector\\BetterPhpDocParser\\PhpDocParser\\BetterPhpDocParser\:\:parseTagValue\(\) should be contravariant with parameter \$tokens \(PHPStan\\PhpDocParser\\Parser\\TokenIterator\) of method PHPStan\\PhpDocParser\\Parser\\PhpDocParser\:\:parseTagValue\(\)#'
        - '#Parameter \#1 \$nodes \(array<PhpParser\\Node\\Stmt\>\) of method Rector\\PostRector\\Rector\\(.*?)\:\:beforeTraverse\(\) should be contravariant with parameter \$nodes \(array<PhpParser\\Node\>\) of method PhpParser\\NodeVisitorAbstract\:\:beforeTraverse\(\)#'

        # property changed else-where
        -
            message: '#If condition is always false#'
            path: rules/TypeDeclaration/Rector/FunctionLike/ParamTypeDeclarationRector.php

        # on purpose, allows empty tokens
        - '#Rector\\BetterPhpDocParser\\ValueObject\\Parser\\BetterTokenIterator\:\:__construct\(\) does not call parent constructor from PHPStan\\PhpDocParser\\Parser\\TokenIterator#'
        - '#Rector\\Comments\\NodeTraverser\\CommentRemovingNodeTraverser\:\:__construct\(\) does not call parent constructor from PhpParser\\NodeTraverser#'

        # always Expr or mixed nested array
        - '#Method Rector\\PhpAttribute\\Contract\\AnnotationToAttributeMapperInterface\:\:map\(\) return type has no value type specified in iterable type array#'
        - '#Method Rector\\PhpAttribute\\AnnotationToAttributeMapper\\(.*?)AnnotationToAttributeMapper\:\:map\(\) return type has no value type specified in iterable type array#'

        # confused generics
        - '#Return type \(array<class\-string<PhpParser\\Node\>\>\) of method Rector\\NodeTypeResolver\\NodeTypeResolver\\(.*?)TypeResolver\:\:getNodeClasses\(\) should be covariant with return type \(array<class\-string<PhpParser\\Node\\(.*?)\>\>\) of method Rector\\NodeTypeResolver\\Contract\\NodeTypeResolverInterface<PhpParser\\Node\\(.*?)\>\:\:getNodeClasses\(\)#'

        # respect webmozzart naming convention to make eaiser to discovery
        -
            message: '#Method name should be different to its parameter name, in a verb form#'
            path: src/Validation/RectorAssert.php

        -
            message: '#Class has a static method must so must contains "Static" in its name#'
            path: src/Validation/RectorAssert.php

        # parallel
        -
             message: '#Instead of array shape, use value object with specific types in constructor and getters#'
             paths:
                 - src/ValueObjectFactory/ProcessResultFactory.php
                 - src/*/*Processor.php
                 - rules/Composer/Application/FileProcessor/ComposerFileProcessor.php
                 - src/Contract/Processor/FileProcessorInterface.php

        - '#Call to function property_exists\(\) with PhpParser\\Node\\Stmt\\ClassLike and (.*?) will always evaluate to true#'

        # code sample configuration
        -
            message: '#new <class\> is limited to 3 "new <class\>\(new <class\>\)\)" nesting to each other\. You have 4 nesting#'
            paths:
                - rules/Renaming/Rector/ClassConstFetch/RenameClassConstFetchRector.php
                - rules/Arguments/Rector/ClassMethod/ArgumentAdderRector.php
                - rules/TypeDeclaration/Rector/ClassMethod/AddParamTypeDeclarationRector.php
                - rules/Transform/Rector/Assign/PropertyFetchToMethodCallRector.php

        # skipped on purpose, as ctor overrie
        - '#Rector\\StaticTypeMapper\\ValueObject\\Type\\SimpleStaticType\:\:__construct\(\) does not call parent constructor from PHPStan\\Type\\StaticType#'

        # complex detection
        - '#Cognitive complexity for "Rector\\Core\\DependencyInjection\\Collector\\ConfigureCallValuesCollector\:\:addConfigureCallValues\(\)" is \d+, keep it under 10#'
        - '#Cognitive complexity for "Rector\\TypeDeclaration\\Rector\\FunctionLike\\ParamTypeDeclarationRector\:\:refactorParam\(\)" is 11, keep it under 10#'

        # return bool on change
        - '#Method "(change|remove)(.*?)" returns bool type, so the name should start with is/has/was#'

        -
            message: '#Casting to float something that.{1}s already float#'
            path: packages/NodeTypeResolver/NodeTypeResolver/ScalarTypeResolver.php #38

        -
            message: '#Casting to string something that.{1}s already string#'
            path: packages/NodeTypeResolver/NodeTypeResolver/ScalarTypeResolver.php #42

        -
            message: '#Casting to int something that.{1}s already int#'
            path: packages/NodeTypeResolver/NodeTypeResolver/ScalarTypeResolver.php #46

        # will be desolved
        -
            path: rules/Php74/Rector/Property/TypedPropertyRector.php
            message: '#Class cognitive complexity is \d+, keep it under 30#'

        -
            message: '#Cognitive complexity for "Rector\\Php80\\Rector\\Class_\\AnnotationToAttributeRector\:\:processDoctrineAnnotationClasses\(\)" is \d+, keep it under 10#'
            path: rules/Php80/Rector/Class_/AnnotationToAttributeRector.php

        - '#Anonymous function should return array\|PhpParser\\Node\\Expr but returns array<PhpParser\\Node\\Expr\>\|PhpParser\\Node\\Expr\|string#'

        - '#Method Rector\\PhpAttribute\\AnnotationToAttributeMapper\\ArrayAnnotationToAttributeMapper\:\:isRemoveArrayPlaceholder\(\) has parameter \$value with no value type specified in iterable type array#'

        -
            message: '#Use value object over return of values#'
            path: src/Application/ApplicationFileProcessor.php

        - '#Method Rector\\Core\\Application\\ApplicationFileProcessor\:\:runParallel\(\) should return array\{system_errors\: array<Rector\\Core\\ValueObject\\Error\\SystemError\>, file_diffs\: array<Rector\\Core\\ValueObject\\Reporting\\FileDiff\>\} but returns array#'

        # Configuration value object, useful
        -
            message: '#Named arguments do not add any value here\. Use normal arguments in the same order#'
            paths:
                - tests/Application/ApplicationFileProcessor/ApplicationFileProcessorTest.php

        # impossible to validate json string is a class-string
        - '#Parameter \#1 \$rectorClass of class Rector\\ChangesReporting\\ValueObject\\RectorWithLineChange constructor expects class\-string<Rector\\Core\\Contract\\Rector\\RectorInterface\>\|Rector\\Core\\Contract\\Rector\\RectorInterface, string given#'

        # will be solved once https://github.com/phpstan/phpstan-src/pull/914 gets released
        -
            message: '#sprintf\(\) call mask types does not match provided arguments types#'
            paths:
                - src/Exception/ShouldNotHappenException.php

        -
            message: '#Only booleans are allowed in an if condition, array\|null given#'
            path: rules/Naming/Naming/PropertyNaming.php

        - '#Parameter \#1 \$objectOrClass of class ReflectionClass constructor expects class\-string<Rector\\RectorInstaller\\GeneratedConfig\>\|Rector\\RectorInstaller\\GeneratedConfig, string given#'

        -
            path: src/Bootstrap/ExtensionConfigResolver.php
            message: '#Offset (.*?)includes(.*?) always exists and is not nullable#'

        # mapper re-use
        - '#Parameter \#1 \$type of method Rector\\PHPStanStaticTypeMapper\\TypeMapper\\ObjectWithoutClassTypeMapper\:\:mapToPhpParserNode\(\) expects PHPStan\\Type\\ObjectWithoutClassType, PHPStan\\Type\\Accessory\\Has(Property|Method)Type given#'
