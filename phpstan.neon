includes:
    - vendor/symplify/phpstan-rules/config/symplify-rules.neon
    - vendor/symplify/phpstan-rules/config/rector-rules.neon

parameters:
    level: 8

    reportUnmatchedIgnoredErrors: false

    # @see https://github.com/tomasVotruba/cognitive-complexity
    cognitive_complexity:
        class: 50
        function: 11

    # requires exact closure types
    checkMissingCallableSignature: true

    paths:
        - rector.php
        - bin
        - config
        - src
        - rules
        # tests
        - tests
        - rules-tests
        - utils

    scanDirectories:
        - stubs

    scanFiles:
        - src/Contract/PhpParser/Node/StmtsAwareInterface.php

    excludePaths:
        - '*tests/*/Fixture/*'
        - '*tests/*/Fixture*'
        - '*tests/*/Source/*'
        - '*tests/*/Source*'

        # tests
        - tests/DependencyInjection/config

        - src/functions

    ignoreErrors:
        -
            identifier: missingType.generics
        -
            message: '#Class cognitive complexity is \d+, keep it under \d+#'
            paths:
                - rules/Php70/EregToPcreTransformer.php
                - src/NodeTypeResolver/NodeTypeResolver.php
                - src/NodeTypeResolver/PHPStan/Scope/PHPStanNodeScopeResolver.php
                - src/PHPStanStaticTypeMapper/TypeMapper/UnionTypeMapper.php
                - src/PhpParser/Printer/BetterStandardPrinter.php #41
                - src/PhpDocParser/PhpDocParser/PhpDocNodeTraverser.php
                - rules/TypeDeclaration/Rector/ClassMethod/StrictArrayParamDimFetchRector.php
                - src/CustomRules/SimpleNodeDumper.php

        -
            message: '#Cognitive complexity for "(.*?)" is (.*?), keep it under 11#'
            paths:
                - rules/Php70/EregToPcreTransformer.php
                - src/PhpParser/Node/Value/ValueResolver.php
                - rules/DeadCode/NodeManipulator/LivingCodeManipulator.php
                - rules/Php80/NodeResolver/SwitchExprsResolver.php
                - src/NodeTypeResolver/NodeTypeResolver.php
                - src/BetterPhpDocParser/PhpDocParser/DoctrineAnnotationDecorator.php
                - src/Parallel/Application/ParallelFileProcessor.php
                # rector rules
                - rules/*/Rector/*Rector.php
                - utils/Rector/MoveAbstractRectorToChildrenRector.php
                - src/PhpDocParser/PhpDocParser/PhpDocNodeTraverser.php
                - src/NodeTypeResolver/PHPStan/Scope/PHPStanNodeScopeResolver.php
                - src/Configuration/RectorConfigBuilder.php
                - rules/TypeDeclaration/PHPStan/ObjectTypeSpecifier.php
                - src/PhpAttribute/NodeFactory/PhpNestedAttributeGroupFactory.php

        # is nested expr
        -
            message: '#Access to an undefined property PhpParser\\Node\\Expr\:\:\$expr#'
            path: rules/DeadCode/NodeManipulator/LivingCodeManipulator.php

        # lack of generic array in nikic/php-parser
        - '#Method (.*?) should return array<PhpParser\\Node\\(.*?)\> but returns array<PhpParser\\Node\>#'

        # generics nullable bugs
        -
            message: '#Method (.*?) should return (.*?)\|null but returns PhpParser\\Node\|null#'
            path: src/PhpParser/Node/BetterNodeFinder.php

        - '#Method (.*?) should return array<T of PhpParser\\Node\> but returns array<PhpParser\\Node\>#'

        -
            message: '#Function "property_exists\(\)" cannot be used/left in the code#'
            paths:
                # on PhpParser Nodes
                - src/NodeNameResolver/NodeNameResolver.php
                - src/BetterPhpDocParser/PhpDocParser/BetterPhpDocParser.php
                - src/BetterPhpDocParser/PhpDocParser/DoctrineAnnotationDecorator.php

        - '#(.*?) class\-string, string given#'

        -
            message: '#Use explicit return value over magic &reference#'
            paths:
                - src/PhpDocParser/PhpDocParser/PhpDocNodeTraverser.php
                - rules/Php70/EregToPcreTransformer.php
                - src/BetterPhpDocParser/PhpDocManipulator/PhpDocClassRenamer.php
                - src/NodeTypeResolver/PHPStan/Type/TypeFactory.php

        # known types
        - '#Parameter (.*?) expects PhpParser\\Node, PhpParser\\Node\|null given#'

        # array_index on generic types
        - '#Method Rector\\NodeTypeResolver\\PHPStan\\Type\\TypeFactory\:\:uniquateTypes\(\) should return array<TType of PHPStan\\Type\\Type\> but returns array<int, PHPStan\\Type\\Type\>#'

        - '#Method Rector\\Arguments\\ArgumentDefaultValueReplacer\:\:processReplaces\(\) should return \(TCall of PhpParser\\Node\\Expr\\FuncCall\|PhpParser\\Node\\Expr\\MethodCall\|PhpParser\\Node\\Expr\\New_\|PhpParser\\Node\\Expr\\StaticCall\|PhpParser\\Node\\Stmt\\ClassMethod\)\|null but returns PhpParser\\Node\\Stmt\\ClassMethod\|null#'

        # native filesystem calls, required for performance reasons
        -
            message: '#@(.*?) is forbidden to use#'
            paths:
                - src/Caching/ValueObject/Storage/FileCacheStorage.php

        -
            message: '#Parameter \#2 \$length of function str_split expects int<1, max\>, int given#'
            paths:
                - rules/Php74/Rector/LNumber/AddLiteralSeparatorToNumberRector.php

        # many internal cases
        - '#Calling (.*?) is not covered by backward compatibility promise\. The method might change in a minor PHPStan version#'

        # known value object, nullable due to typed property
        -
            message: '#Cannot call method (.*?)\(\) on (.*?)\\ProcessPool\|null#'
            path: src/Parallel/Application/ParallelFileProcessor.php

        # generics
        - '#Parameter \#1 \$stmts of class Rector\\PhpParser\\Node\\CustomNode\\FileWithoutNamespace constructor expects array<PhpParser\\Node\\Stmt\>, array<TNode of PhpParser\\Node\> given#'

        -
            message: '#Use value object over return of values#'
            paths:
                - src/BetterPhpDocParser/PhpDocParser/StaticDoctrineAnnotationParser/ArrayParser.php
                - rules/EarlyReturn/Rector/If_/ChangeNestedIfsToEarlyReturnRector.php
                - rules/Php70/EregToPcreTransformer.php
                - rules/DeadCode/NodeManipulator/LivingCodeManipulator.php
                - rules/EarlyReturn/Rector/If_/ChangeAndIfToEarlyReturnRector.php
                - src/PhpParser/NodeTransformer.php

        # mapper re-use
        - '#Parameter \#1 \$type of method Rector\\PHPStanStaticTypeMapper\\TypeMapper\\ObjectWithoutClassTypeMapper\:\:mapToPhpParserNode\(\) expects PHPStan\\Type\\ObjectWithoutClassType, PHPStan\\Type\\Accessory\\Has(Property|Method)Type given#'

        # Scope vs MutatingScope interchangable false positive
        - '#Parameter \#3 \$nodeCallback of method PHPStan\\Analyser\\NodeScopeResolver\:\:processNodes\(\) expects callable\(PhpParser\\Node, PHPStan\\Analyser\\Scope\)\: void, (callable|Closure)\(PhpParser\\Node, PHPStan\\Analyser\\MutatingScope\)\: void given#'

        # internal reflection
        - '#Instead of "new ClassReflection\(\)" use ReflectionProvider service or "\(new PHPStan\\Reflection\\ClassReflection\(<desired_type>\)\)" for static reflection to work#'

        - '#Callable callable\(PHPStan\\Type\\Type\)\: PHPStan\\Type\\Type invoked with 2 parameters, 1 required#'

        # known value
        - '#Method Rector\\Php\\PhpVersionProvider\:\:provide\(\) should return 50200\|50300\|50400\|50500\|50600\|70000\|70100\|70200\|70300\|70400\|80000\|80100\|80200\|80300\|80400\|100000 but returns int#'

        # stubs-rector directory exists on target-repository
        -
            message: '#The path "/\.\./\.\./stubs\-rector" was not found#'
            path: src/Autoloading/BootstrapFilesIncluder.php # 54

        -
            message: '#Function "class_exists\(\)" cannot be used/left in the code#'
            paths:
                # autoload check in bin file
                - bin/rector.php
                # for config class reflection
                - src/Bootstrap/ExtensionConfigResolver.php
                - src/DependencyInjection/LazyContainerFactory.php
                - src/Validation/RectorConfigValidator.php

        # use of internal phpstan classes
        -
            message: '#Creating new PHPStan\\Reflection\\BetterReflection\\SourceLocator\\Optimized(.*?)SourceLocator is not covered by backward compatibility promise\. The class might change in a minor PHPStan version#'
            path: src/NodeTypeResolver/Reflection/BetterReflection/SourceLocatorProvider/DynamicSourceLocatorProvider.php

        -
            message: '#Do not name "[a-z]", shorter than 2 chars#'
            paths:
                # override parent method named "p"
                - src/PhpParser/Printer/BetterStandardPrinter.php
                # regex
                - rules/Php70/EregToPcreTransformer.php

        -
            message:  '#@\\ini_set\(.*\)" is forbidden to use#'
            path: bin/rector.php

        -
            message: '#Creating new PHPStan\\Parser\\(CachedParser|SimpleParser) is not covered by backward compatibility promise\. The class might change in a minor PHPStan version#'
            path: src/PhpDocParser/PhpParser/SmartPhpParserFactory.php

        # known existing class
        -
            message: '#Instead of "instanceof/is_a\(\)" use ReflectionProvider service or "\(new ObjectType\(<desired_type>\)\)\->isSuperTypeOf\(<element_type>\)" for static reflection to work#'
            path: src/Skipper/Skipper/SkipSkipper.php

        # the local instanceof for known types
        - '#Instead of "instanceof/is_a\(\)" use ReflectionProvider service or "\(new ObjectType\(<desired_type>\)\)\->isSuperTypeOf\(<element_type>\)" for static reflection to work#'

        # required for reflection
        -
            message: '#Function "(.*?)\(\)" cannot be used/left in the code#'
            path: src/Util/Reflection/PrivatesAccessor.php

        -
            message: '#Method Rector\\Util\\ArrayParametersMerger\:\:mergeLeftToRightWithCallable\(\) has parameter \$mergeCallback with no signature specified for callable#'
            path: src/Util/ArrayParametersMerger.php

        # fixture class
        - '#Class "Rector\\Tests\\Issues\\ScopeNotAvailable\\Variable\\ArrayItemForeachValueRector" is missing @see annotation with test case class reference#'

        -
            message: '#Parameter \#1 \$phpVersion of method Rector\\Config\\RectorConfig\:\:phpVersion\(\) expects 50200\|50300\|50400\|50500\|50600\|70000\|70100\|70200\|70300\|70400\|80000\|80100\|80200\|80300\|80400\|100000, (.*?) given#'
            path: rules-tests

        -
            message: '#Class (.*?) not found#'
            paths:
                - rules-tests/*/config/*

        # trusted items
        - '#Parameter \#1 \$nodes of method PhpParser\\PrettyPrinterAbstract\:\:pCommaSeparatedMultiline\(\) expects array<PhpParser\\Node>, array<PhpParser\\Node\\Expr\\ArrayItem\|null> given#'


        # class string
        - '#Parameter \#1 \$name of method PHPStan\\BetterReflection\\Reflection\\Adapter\\ReflectionClass\:\:getAttributes\(\) expects class\-string\|null, string given#'

        # useless
        - '#Parameter \#1 \$suffix of method PHPUnit\\Framework\\Assert\:\:assertStringEndsWith\(\) expects non\-empty\-string, string given#'

        -
            message: '#Function "(function_exists|dump_node)\(\)" cannot be used/left in the code#'
            path: src/functions/node_helper.php

        # false positive on enums
        - '#Method Rector\\Console\\Command\\SetupCICommand\:\:resolveCurrentCI\(\) never returns (.*?) so it can be removed from the return type#'

        # stmts aware/expression generics
        - '#PhpParser\\Node\\Stmt\\Expression is not generic#'

        - '#Parameter \#3 \$assign of method Rector\\CodeQuality\\Rector\\FunctionLike\\SimplifyUselessVariableRector\:\:processSimplifyUselessVariable\(\) expects PhpParser\\Node\\Expr\\Assign\|PhpParser\\Node\\Expr\\AssignOp, PhpParser\\Node\\Expr given#'

        # false positive
        -
            message: '#Offset 0 does not exist on array<PhpParser\\Node\\Stmt>\|null#'
            path:  rules/Php70/Rector/ClassMethod/Php4ConstructorRector.php

        # chicken/egg
        -
            message: '#Function "(d|dd)\(\)" cannot be used/left in the code#'
            path: tests/debug_functions.php

        # debug functions
        -
            message: '#Function "function_exists\(\)" cannot be used/left in the code\: use ReflectionProvider\->has\*\(\) instead#'
            path: tests/debug_functions.php

        # method signature kept for symmetry of hasParentClassMethod() with getParentClassMethod()
        -
            message: '#Parameters should use "PhpParser\\Node\\Stmt\\ClassMethod" types as the only types passed to this method#'
            path: src/VendorLocker/ParentClassMethodTypeOverrideGuard.php

        # checks for rector always autoloaded rules only
        -
            message: '#Function "(class_exists|interface_exists)\(\)" cannot be used/left in the code\: use ReflectionProvider\->has\*\(\) instead#'
            path: src/Skipper/SkipCriteriaResolver/SkippedClassResolver.php

        # ignore until PHPParser returns more precise types
        -
            message: '#Parameter \#1 \$useType of callable callable\(0\|1\|2\|3, PhpParser\\Node\\Stmt\\UseUse, string\): void expects 0\|1\|2\|3, int given.#'
            path: rules/CodingStyle/ClassNameImport/UseImportsTraverser.php

        - '#(.*?)\\Contract\\PhpParser\\Node\\StmtsAwareInterface\:\:\$stmts#'

        # dev rule
        - '#Class "Rector\\Utils\\Rector\\MoveAbstractRectorToChildrenRector" is missing @see annotation with test case class reference#'

        # optional as changes behavior, should be used explicitly outside PHP upgrade
        - '#Register "Rector\\Php73\\Rector\\FuncCall\\JsonThrowOnErrorRector" service to "php73\.php" config set#'
        - '#Register "Rector\\Php81\\Rector\\ClassConst\\FinalizePublicClassConstantRector" service to "php81\.php" config set#'

        # soon to be extended
        -
            path: src/Reflection/ClassModifierChecker.php
            message: '#Parameters should use "PhpParser\\Node\\Stmt\\ClassMethod" types as the only types passed to this method#'

        # known enum from strings
        - '#Method Rector\\Php\\PolyfillPackagesProvider\:\:filterPolyfillPackages\(\) should return array\<.*\> but returns array<int, non\-falsy\-string>#'

        # closure detailed
        - '#Method Rector\\Config\\RectorConfig\:\:singleton\(\) has parameter \$concrete with no signature specified for Closure#'

        -
            message: '#Class cognitive complexity is \d+, keep it under 50#'
            paths:
                 - src/PhpParser/Node/Value/ValueResolver.php
                 - src/Configuration/RectorConfigBuilder.php

        # dynamic printer
        -
             message: '#Use explicit names over dynamic ones#'
             paths:
                 - src/CustomRules/SimpleNodeDumper.php
                 - src/PhpDocParser/PhpDocParser/PhpDocNodeTraverser.php
                 - src/Testing/PHPUnit/AbstractTestCase.php

        # complex logic, to keep on single place for easy adjustments
        -
            message: '#Cognitive complexity for "Rector\\CustomRules\\SimpleNodeDumper(.*?)" is \d+, keep it under 11#'
            path: src/CustomRules/SimpleNodeDumper.php

        # way to invoke repeated quesitons in symfony
        -
            message: '#While loop condition is always true#'
            path: src/Console/Command/DetectNodeCommand.php

        # known node variables
        -
            message: '#Access to an undefined property PhpParser\\Node\\Scalar\:\:\$value#'
            path: src/CustomRules/SimpleNodeDumper.php

        -
            message: '#Offset \(int\|string\) on non\-empty\-array<PHPStan\\PhpDocParser\\Ast\\PhpDoc\\PhpDocChildNode> in isset\(\) always exists and is not nullable#'
            path: src/BetterPhpDocParser/PhpDocParser/DoctrineAnnotationDecorator.php

        # false positive
        -
            message: '#Parameters should use "array" types as the only types passed to this method#'
            path: src/Util/NodePrinter.php
        - '#Cognitive complexity for "Rector\\TypeDeclaration\\NodeAnalyzer\\CallerParamMatcher\:\:matchCallParamType\(\)" is 12, keep it under 11#'
